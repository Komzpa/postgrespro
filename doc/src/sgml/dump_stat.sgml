<!-- doc/src/sgml/dump_stat.sgml -->

<sect1 id="dump-stat" xreflabel="dump-stat">
    <title>dump_stat</title>

    <indexterm zone="dump-stat">
        <primary>dump_stat</primary>
    </indexterm>

    <para>
        The <filename>dump_stat</> module provides functions that allow you to
        backup and recover the contents of the
        <link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>
        table. The <function>dump_statistic</> function generates <literal>INSERT</>
        statements which can later be applied to a compatible database. The extension
        should be installed on the recipient server in order to successfuly restore
        statistical data since these statements heavily rely on the provided functions.
    </para>
    
    <para>
        Note that the definition of the
        <link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>
        table might change occasionally, which means that generated dump might be incompatible
        with future releases of PostgreSQL.
    </para>

    <sect2>
        <title>Functions</title>

        <variablelist>
            <varlistentry>
                <term>
                    <function>dump_statistic() returns setof text</function>
                    <indexterm>
                        <primary>dump_statistic</primary>
                    </indexterm>
                </term>

                <listitem>
                    <para>
                        <function>dump_statistic</function> dumps the contents of the
                        <link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>
                        system catalog. It produces an <literal>INSERT</> statement
                        per each tuple of the
                        <link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>,
                        excluding the ones that contain statistical data for tables in the
                        <literal>information_schema</> and <literal>pg_catalog</> schemas.
                    </para>
                    
                    <para>
                        The <literal>INSERT</> statement takes form of
<screen>
WITH upsert as (
  UPDATE pg_catalog.pg_statistic SET %s
  WHERE to_schema_qualified_relation(starelid) = relname
    AND to_attname(relname, staattnum) = attname
    AND to_atttype(relname, staattnum) = atttype
    AND stainherit = r.stainherit
  RETURNING *)
ins as (
  SELECT %s
  WHERE NOT EXISTS (SELECT * FROM upsert)
    AND to_attnum(relname, attname) IS NOT NULL
    AND to_atttype(relname, attname) = atttype)
INSERT INTO pg_catalog.pg_statistic SELECT * FROM ins;
</screen>
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <function>dump_statistic(schema_name text) returns setof text</function>
                </term>

                <listitem>
                    <para>
                        <function>dump_statistic</function> dumps the contents of the
                        <link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>
                        system catalog. It produces an <literal>INSERT</> statement
                        per each tuple of the
                        <link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>,
                        excluding the ones that do not relate to the tables in
                        <literal>schema_name</> schema.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <function>dump_statistic(schema_name text, table_name text) returns setof text</function>
                </term>

                <listitem>
                    <para>
                        <function>dump_statistic</function> dumps the contents of the
                        <link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>
                        system catalog. It produces an <literal>INSERT</> statement
                        per each tuple of the
                        <link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>,
                        excluding the ones that do not relate to the specified
                        <literal>"schema_name.table_name"</> table.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <function>to_schema_qualified_operator(opid oid) returns text</function>
                    <indexterm>
                        <primary>to_schema_qualified_operator</primary>
                    </indexterm>
                </term>

                <listitem>
                    <para>
                        Fetches the schema-qualified operator name by operator id.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <function>to_schema_qualified_type(opid oid) returns text</function>
                    <indexterm>
                        <primary>to_schema_qualified_type</primary>
                    </indexterm>
                </term>

                <listitem>
                    <para>
                        Fetches the schema-qualified type name by type id.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <function>to_schema_qualified_relation(opid oid) returns text</function>
                    <indexterm>
                        <primary>to_schema_qualified_relation</primary>
                    </indexterm>
                </term>

                <listitem>
                    <para>
                        Fetches the schema-qualified relation name by relation id.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <function>anyarray_elemtype(arr anyarray) returns oid</function>
                    <indexterm>
                        <primary>anyarray_elemtype</primary>
                    </indexterm>
                </term>

                <listitem>
                    <para>
                        Returns the element type of the given array as <literal>oid</>.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <function>to_attname(relation text, colnum int2) returns text</function>
                    <indexterm>
                        <primary>to_attname</primary>
                    </indexterm>
                </term>

                <listitem>
                    <para>
                        Given a relation name and a column number, returns the column name
                        as <literal>text</>.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <function>to_attnum(relation text, col text) returns int2</function>
                    <indexterm>
                        <primary>to_attnum</primary>
                    </indexterm>
                </term>

                <listitem>
                    <para>
                        Given a relation name and a column name, returns the column number
                        as <literal>int2</>.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <function>to_atttype(relation text, col text) returns text</function>
                    <indexterm>
                        <primary>to_atttype</primary>
                    </indexterm>
                </term>

                <listitem>
                    <para>
                        Given a relation name and a column name, returns the column type
                        as <literal>text</>.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <function>to_namespace(nsp text) returns oid</function>
                    <indexterm>
                        <primary>to_namespace</primary>
                    </indexterm>
                </term>

                <listitem>
                    <para>
                        <function>to_namespace</function> duplicates the behavior of
                        the cast to <literal>regnamespace</> type, which is not
                        present in the 9.4 release (and prior releases). This
                        function returns the <literal>oid</> of the given schema.
                    </para>
                </listitem>
            </varlistentry>

            <varlistentry>
                <term>
                    <function>get_namespace(relation oid) returns oid</function>
                    <indexterm>
                        <primary>get_namespace</primary>
                    </indexterm>
                </term>

                <listitem>
                    <para>
                        <function>get_namespace</function> returns the schema
                        of the given relation as <literal>oid</>.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
</sect1>

<sect1 id="jsquery">
  <title>JsQuery - json query language with GIN indexing support</title>
  <sect2 id="jsquery-introduction">
    <title>Introduction</title>
    <para>
      JsQuery - is a language to query jsonb data type, introduced in
      PostgreSQL release 9.4.
    </para>
    <para>
      It's primary goal is to provide an additional functionality to
      jsonb (currently missing in PostgreSQL), such as a simple and
      effective way to search in nested objects and arrays, more
      comparison operators with indexes support. We hope, that jsquery
      will be eventually a part of PostgreSQL.
    </para>
    <para>
      Jsquery is released as jsquery data type (similar to tsquery) and
      @@ match operator for jsonb.
    </para>
  </sect2>
  <sect2 id="jsquery-authors">
    <title>Authors</title>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Teodor Sigaev <email>teodor@sigaev.ru</email>, Postgres
          Professional, Moscow, Russia
        </para>
      </listitem>
      <listitem>
        <para>
          Alexander Korotkov <email>aekorotkov@gmail.com</email>,
          Postgres Professional, Moscow, Russia
        </para>
      </listitem>
      <listitem>
        <para>
          Oleg Bartunov <email>oleg@sai.msu.su</email>, Postgres
          Professional, Moscow, Russia
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2 id="jsquery-regards">
    <title>Regards</title>
    <para>
      Development is sponsored by
      <ulink url="http://wargaming.net">Wargaming.net</ulink>.
    </para>
  </sect2>
  <sect2 id="jsquery-installation">
    <title>Installation</title>
    <para>
      When you installed PostgresPro distribution, jsquery is available
      as a contrib moudle. Install contrib modules (postgrespro-contrib
      package in the binary distribution for Linux, or make -C contrib
      install if you are building from source), then start psql shell
      and type
    </para>
    <programlisting>
CREATE EXTENSION jsquery;
</programlisting>
  </sect2>
  <sect2 id="json-query-language">
    <title>JSON query language</title>
    <para>
      JsQuery extension contains <literal>jsquery</literal> datatype
      which represents whole JSON query as a single value (like
      <literal>tsquery</literal> does for fulltext search). The query is
      an expression on JSON-document values.
    </para>
    <para>
      Simple expression is specified as
      <literal>path binary_operator value</literal> or
      <literal>path unary_operator</literal>. See following examples.
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <literal>x = &quot;abc&quot;</literal> - value of key
          &quot;x&quot; is equal to &quot;abc&quot;;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>$ @&gt; [4, 5, &quot;zzz&quot;]</literal> - the JSON
          document is an array containing values 4, 5 and
          &quot;zzz&quot;;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>&quot;abc xyz&quot; &gt;= 10</literal> - value of key
          &quot;abc xyz&quot; is greater than or equal to 10;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>volume IS NUMERIC</literal> - type of key
          &quot;volume&quot; is numeric.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>$ = true</literal> - the whole JSON document is just
          a true.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>similar_ids.@# &gt; 5</literal> - similar_ids is an
          array or object of length greater than 5;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>similar_product_ids.# = &quot;0684824396&quot;</literal>
          - array &quot;similar_product_ids&quot; contains string
          &quot;0684824396&quot;.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>*.color = &quot;red&quot;</literal> - there is object
          somewhere which key &quot;color&quot; has value
          &quot;red&quot;.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>foo = *</literal> - key &quot;foo&quot; exists in
          object.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Path selects set of JSON values to be checked using given
      operators. In the simplest case path is just an key name. In
      general path is key names and placeholders combined by dot signs.
      Path can use following placeholders:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <literal>#</literal> - any index of array;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>%</literal> - any key of object;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>*</literal> - any sequence of array indexes and
          object keys;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>@#</literal> - length of array or object, could be
          only used as last component of path;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>$</literal> - the whole JSON document as single
          value, could be only the whole path.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Expression is true when operator is true against at least one
      value selected by path.
    </para>
    <para>
      Key names could be given either with or without double quotes. Key
      names without double quotes shouldn't contain spaces, start with
      number or concur with jsquery keyword.
    </para>
    <para>
      The supported binary operators are:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Equality operator: <literal>=</literal>;
        </para>
      </listitem>
      <listitem>
        <para>
          Numeric comparison operators: <literal>&gt;</literal>,
          <literal>&gt;=</literal>, <literal>&lt;</literal>,
          <literal>&lt;=</literal>;
        </para>
      </listitem>
      <listitem>
        <para>
          Search in the list of scalar values using
          <literal>IN</literal> operator;
        </para>
      </listitem>
      <listitem>
        <para>
          Array comparison operators: <literal>&amp;&amp;</literal>
          (overlap), <literal>@&gt;</literal> (contains),
          <literal>&lt;@</literal> (contained in).
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The supported unary operators are:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Check for existence operator: <literal>= *</literal>;
        </para>
      </listitem>
      <listitem>
        <para>
          Check for type operators: <literal>IS ARRAY</literal>,
          <literal>IS NUMERIC</literal>, <literal>IS OBJECT</literal>,
          <literal>IS STRING</literal> and
          <literal>IS BOOLEAN</literal>.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Expressions could be complex. Complex expression is a set of
      expressions combined by logical operators (<literal>AND</literal>,
      <literal>OR</literal>, <literal>NOT</literal>) and grouped using
      braces.
    </para>
    <para>
      Examples of complex expressions are given below.
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <literal>a = 1 AND (b = 2 OR c = 3) AND NOT d = 1</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>x.% = true OR x.# = true</literal>
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Prefix expressions are expressions given in the form path
      (subexpression). In this case path selects JSON values to be
      checked using given subexpression. Check results are aggregated in
      the same way as in simple expressions.
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <literal>#(a = 1 AND b = 2)</literal> - exists element of
          array which a key is 1 and b key is 2
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>%($ &gt;= 10 AND $ &lt;= 20)</literal> - exists
          object key which values is between 10 and 20
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Path also could contain following special placeholders with
      &quot;every&quot; semantics:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <literal>#:</literal> - every indexes of array;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>%:</literal> - every key of object;
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>*:</literal> - every sequence of array indexes and
          object keys.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Consider following example.
    </para>
    <programlisting>
%.#:($ &gt;= 0 AND $ &lt;= 1)
</programlisting>
    <para>
      This example could be read as following: there is at least one key
      which value is array of numerics between 0 and 1.
    </para>
    <para>
      We can rewrite this example in the following form with extra
      braces.
    </para>
    <programlisting>
%(#:($ &gt;= 0 AND $ &lt;= 1))
</programlisting>
    <para>
      The first placeholder <literal>%</literal> checks that expression
      in braces is true for at least one value in object. The second
      placeholder <literal>#:</literal> checks value to be array and all
      its elements satisfy expressions in braces.
    </para>
    <para>
      We can rewrite this example without <literal>#:</literal>
      placeholder as follows.
    </para>
    <programlisting>
%(NOT #(NOT ($ &gt;= 0 AND $ &lt;= 1)) AND $ IS ARRAY)
</programlisting>
    <para>
      In this example we transform assertion that every element of array
      satisfy some condition to assertion that there is no one element
      which doesn't satisfy the same condition.
    </para>
    <para>
      Some examples of using paths are given below.
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <literal>numbers.#: IS NUMERIC</literal> - every element of
          &quot;numbers&quot; array is numeric.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>*:($ IS OBJECT OR $ IS BOOLEAN)</literal> - JSON is a
          structure of nested objects with booleans as leaf values.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>#:.%:($ &gt;= 0 AND $ &lt;= 1)</literal> - each
          element of array is object containing only numeric values
          between 0 and 1.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>documents.#:.% = *</literal> - &quot;documents&quot;
          is array of objects containing at least one key.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>%.#: ($ IS STRING)</literal> - JSON object contains
          at least one array of strings.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>#.% = true</literal> - at least one array element is
          objects which contains at least one &quot;true&quot; value.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Usage of path operators and braces need some explanation. When
      same path operators are used multiple times they may refer
      different values while you can refer same value multiple time by
      using braces and <literal>$</literal> operator. See following
      examples.
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <literal># &lt; 10 AND # &gt; 20</literal> - exists element
          less than 10 and exists another element greater than 20.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>#($ &lt; 10 AND $ &gt; 20)</literal> - exists element
          which both less than 10 and greater than 20 (impossible).
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>#($ &gt;= 10 AND $ &lt;= 20)</literal> - exists
          element between 10 and 20.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal># &gt;= 10 AND # &lt;= 20</literal> - exists element
          great or equal to 10 and exists another element less or equal
          to 20. Query can be satisfied by array with no elements
          between 10 and 20, for instance [0,30].
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Same rules apply when you search inside objects and branchy
      structures.
    </para>
    <para>
      Type checking operators and &quot;every&quot; placeholders are
      useful for document schema validation. JsQuery matchig operator
      <literal>@@</literal> is immutable and can be used in CHECK
      constraint. See following example.
    </para>
    <programlisting>
CREATE TABLE js (
    id serial,
    data jsonb,
    CHECK (data @@ '
        name IS STRING AND
        similar_ids.#: IS NUMERIC AND
        points.#:(x IS NUMERIC AND y IS NUMERIC)'::jsquery));
</programlisting>
    <para>
      In this example check constraint validates that in
      &quot;data&quot; jsonb column: value of &quot;name&quot; key is
      string, value of &quot;similar_ids&quot; key is array of numerics,
      value of &quot;points&quot; key is array of objects which contain
      numeric values in &quot;x&quot; and &quot;y&quot; keys.
    </para>
    <para>
      See our
      <ulink url="http://www.sai.msu.su/~megera/postgres/talks/pgconfeu-2014-jsquery.pdf">pgconf.eu
      presentation</ulink> for more examples.
    </para>
  </sect2>
  <sect2 id="jsquery-gin-indexes">
    <title>GIN indexes</title>
    <para>
      JsQuery extension contains two operator classes (opclasses) for
      GIN which provide different kinds of query optimization.
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          jsonb_path_value_ops
        </para>
      </listitem>
      <listitem>
        <para>
          jsonb_value_path_ops
        </para>
      </listitem>
    </itemizedlist>
    <para>
      In each of two GIN opclasses jsonb documents are decomposed into
      entries. Each entry is associated with particular value and it's
      path. Difference between opclasses is in the entry representation,
      comparison and usage for search optimization.
    </para>
    <para>
      For example, jsonb document
      <literal>{&quot;a&quot;: [{&quot;b&quot;: &quot;xyz&quot;, &quot;c&quot;: true}, 10], &quot;d&quot;: {&quot;e&quot;: [7, false]}}</literal>
      would be decomposed into following entries:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <literal>&quot;a&quot;.#.&quot;b&quot;.&quot;xyz&quot;</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>&quot;a&quot;.#.&quot;c&quot;.true</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>&quot;a&quot;.#.10</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>&quot;d&quot;.&quot;e&quot;.#.7</literal>
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>&quot;d&quot;.&quot;e&quot;.#.false</literal>
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Since JsQuery doesn't support search in particular array index, we
      consider all array elements to be equivalent. Thus, each array
      element is marked with same <literal>#</literal> sign in the path.
    </para>
    <para>
      Major problem in the entries representation is its size. In the
      given example key &quot;a&quot; is presented three times. In the
      large branchy documents with long keys size of naive entries
      representation becomes unreasonable. Both opclasses address this
      issue but in a slightly different way.
    </para>
    <sect3 id="jsonb-path-value-ops">
      <title>jsonb_path_value_ops</title>
      <para>
        jsonb_path_value_ops represents entry as pair of path hash and
        value. Following pseudocode illustrates it.
      </para>
      <programlisting>
(hash(path_item_1.path_item_2. ... .path_item_n); value)
</programlisting>
      <para>
        In comparison of entries path hash is the higher part of entry
        and value is its lower part. This determines the features of
        this opclass. Since path is hashed and it is higher part of
        entry we need to know the full path to the value in order to use
        it for search. However, once path is specified we can use both
        exact and range searches very efficiently.
      </para>
    </sect3>
    <sect3 id="jsonb-value-path-ops">
      <title>jsonb_value_path_ops</title>
      <para>
        jsonb_value_path_ops represents entry as pair of value and bloom
        filter of path.
      </para>
      <programlisting>
(value; bloom(path_item_1) | bloom(path_item_2) | ... | bloom(path_item_n))
</programlisting>
      <para>
        In comparison of entries value is the higher part of entry and
        bloom filter of path is its lower part. This determines the
        features of this opclass. Since value is the higher part of
        entry we can perform only exact value search efficiently. Range
        value search is possible as well but we would have to filter all
        the the different paths where matching values occur. Bloom
        filter over path items allows index usage for conditions
        containing <literal>%</literal> and <literal>*</literal> in
        their paths.
      </para>
    </sect3>
    <sect3 id="jsquery-optimization">
      <title>Query optimization</title>
      <para>
        JsQuery opclasses perform complex query optimization. Thus it's
        valuable for developer or administrator to see the result of
        such optimization. Unfortunately, opclasses aren't allowed to do
        any custom output to the EXPLAIN. That's why JsQuery provides
        following functions which allows to see how particular opclass
        optimizes given query.
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            gin_debug_query_path_value(jsquery) - for
            jsonb_path_value_ops
          </para>
        </listitem>
        <listitem>
          <para>
            gin_debug_query_value_path(jsquery) - for
            jsonb_value_path_ops
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Result of these functions is a textual representation of query
        tree which leafs are GIN search entries. Following examples show
        different results of query optimization by different opclasses.
      </para>
      <programlisting>
    # SELECT gin_debug_query_path_value('x = 1 AND (*.y = 1 OR y = 2)');
     gin_debug_query_path_value
    ----------------------------
     x = 1 , entry 0           +

    # SELECT gin_debug_query_value_path('x = 1 AND (*.y = 1 OR y = 2)');
     gin_debug_query_value_path
    ----------------------------
     AND                       +
       x = 1 , entry 0         +
       OR                      +
         *.y = 1 , entry 1     +
         y = 2 , entry 2       +
</programlisting>
      <para>
        Unfortunately, jsonb have no statistics yet. That's why JsQuery
        optimizer has to do imperative decision while selecting
        conditions to be evaluated using index. This decision is made by
        assumtion that some condition types are less selective than
        others. Optimizer divides conditions into following selectivity
        class (listed by descending of selectivity).
      </para>
      <orderedlist numeration="arabic" spacing="compact">
        <listitem>
          <para>
            Equality (x = c)
          </para>
        </listitem>
        <listitem>
          <para>
            Range (c1 &lt; x &lt; c2)
          </para>
        </listitem>
        <listitem>
          <para>
            Inequality (x &gt; c)
          </para>
        </listitem>
        <listitem>
          <para>
            Is (x is type)
          </para>
        </listitem>
        <listitem>
          <para>
            Any (x = *)
          </para>
        </listitem>
      </orderedlist>
      <para>
        Optimizer evades index evaluation of less selective conditions
        when possible. For example, in the
        <literal>x = 1 AND y &gt; 0</literal> query
        <literal>x = 1</literal> is assumed to be more selective than
        <literal>y &gt; 0</literal>. That's why index isn't used for
        evaluation of <literal>y &gt; 0</literal>.
      </para>
      <programlisting>
    # SELECT gin_debug_query_path_value('x = 1 AND y &gt; 0');
     gin_debug_query_path_value
    ----------------------------
     x = 1 , entry 0           +
</programlisting>
      <para>
        With lack of statistics decisions made by optimizer can be
        inaccurate. That's why JsQuery supports hints. Comments
        <literal>/*-- index */</literal> and
        <literal>/*-- noindex */</literal> placed in the conditions
        forces optimizer to use and not use index correspondingly.
      </para>
      <programlisting>
    SELECT gin_debug_query_path_value('x = 1 AND y /*-- index */ &gt; 0');
     gin_debug_query_path_value
    ----------------------------
     AND                       +
       x = 1 , entry 0         +
       y &gt; 0 , entry 1         +

    SELECT gin_debug_query_path_value('x /*-- noindex */ = 1 AND y &gt; 0');
     gin_debug_query_path_value
     ----------------------------
      y &gt; 0 , entry 0           +
</programlisting>
    </sect3>
  </sect2>
  <sect2 id="jsquery-contribution">
    <title>Contribution</title>
    <para>
      Please, notice, that JsQuery is still under development and while
      it's stable and tested, it may contains some bugs. Don't hesitate
      to raise
      <ulink url="https://github.com/akorotkov/jsquery/issues">issues at
      github</ulink> with your bug reports.
    </para>
    <para>
      If you're lacking of some functionality in JsQuery and feeling
      power to implement it then you're welcome to make pull requests.
    </para>
  </sect2>
</sect1>

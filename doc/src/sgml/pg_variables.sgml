<sect1 id="pg-variables">
  <title>pg_variables</title>
  <sect2 id="pg-varaibles-introduction">
    <title>Introduction</title>
    <para>
      The <filename>pg_variables</filename> module
      provides functions to work with variables of various types.
      Created variables live only in the current user session.
    </para>

    <para>
      Note that the module does not support transactions and savepoints. For
      example:
    </para>
<programlisting>
SELECT pgv_set_int('vars', 'int1', 101);
BEGIN;
SELECT pgv_set_int('vars', 'int2', 102);
ROLLBACK;

SELECT * FROM pgv_list() order by package, name;
 package | name
---------+------
 vars    | int1
 vars    | int2
(2 rows)
</programlisting>
  </sect2>

  <sect2 id="pg-variables-functions">
    <title>Module functions</title>

    <para>
      The functions provided by the <filename>pg_variables</filename> module are
      shown in the tables below. The module supports the following scalar and
      record types.
    </para>

    <para>
      To use <function>pgv_get_()</> functions required package and variable
      must exists. It is necessary to set variable with <function>pgv_set_()</>
      functions to use <function>pgv_get_()</> functions.
    </para>

    <para>
      If a package does not exists you will get the following error:
    </para>

<programlisting>
SELECT pgv_get_int('vars', 'int1');
ERROR:  unrecognized package "vars"
</programlisting>

    <para>
      If a variable does not exists you will get the following error:
    </para>

<programlisting>
SELECT pgv_get_int('vars', 'int1');
ERROR:  unrecognized variable "int1"
</programlisting>

    <para>
      <function>pgv_get_()</> functions check the variable type. If the variable
      type does not match with the function type the error will be raised:
    </para>

<programlisting>
SELECT pgv_get_text('vars', 'int1');
ERROR:  variable "int1" requires "integer" value
</programlisting>

    <sect3 id="pg-variables-integer-variables">
      <title>Integer variables</title>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Function
              </entry>
              <entry>
                Returns
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pgv_set_int(package text, name text, value int)</literal>
              </entry>
              <entry>
                <literal>void</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_get_int(package text, name text, strict bool default true)</literal>
              </entry>
              <entry>
                <literal>int</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="pg-variables-text-variables">
      <title>Text variables</title>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Function
              </entry>
              <entry>
                Returns
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pgv_set_text(package text, name text, value text)</literal>
              </entry>
              <entry>
                <literal>void</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_get_text(package text, name text, strict bool default true)</literal>
              </entry>
              <entry>
                <literal>text</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="pg-variables-numeric-variables">
      <title>Numeric variables</title>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Function
              </entry>
              <entry>
                Returns
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pgv_set_numeric(package text, name text, value numeric)</literal>
              </entry>
              <entry>
                <literal>void</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_get_numeric(package text, name text, strict bool default true)</literal>
              </entry>
              <entry>
                <literal>numeric</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="timestamp-variables">
      <title>Timestamp variables</title>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Function
              </entry>
              <entry>
                Returns
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pgv_set_timestamp(package text, name text, value timestamp)</literal>
              </entry>
              <entry>
                <literal>void</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_get_timestamp(package text, name text, strict bool default true)</literal>
              </entry>
              <entry>
                <literal>timestamp</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="pg-variables-timestamptz-variables">
      <title>Timestamp with timezone variables</title>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Function
              </entry>
              <entry>
                Returns
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pgv_set_timestamptz(package text, name text, value timestamptz)</literal>
              </entry>
              <entry>
                <literal>void</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_get_timestamptz(package text, name text, strict bool default true)</literal>
              </entry>
              <entry>
                <literal>timestamptz</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="pg-variables-date-variables">
      <title>Date variables</title>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Function
              </entry>
              <entry>
                Returns
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pgv_set_date(package text, name text, value date)</literal>
              </entry>
              <entry>
                <literal>void</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_get_date(package text, name text, strict bool default true)</literal>
              </entry>
              <entry>
                <literal>date</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="pg-variables-jsonb-variables">
      <title>Jsonb variables</title>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Function
              </entry>
              <entry>
                Returns
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pgv_set_jsonb(package text, name text, value jsonb)</literal>
              </entry>
              <entry>
                <literal>void</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_get_jsonb(package text, name text, strict bool default true)</literal>
              </entry>
              <entry>
                <literal>jsonb</literal>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="pg-variables-records">
      <title>Records</title>

      <para>
        The following functions are provided by the module to work with
        collections of record types.
      </para>

      <para>
        To use <function>pgv_update()</>, <function>pgv_delete()</> and
        <function>pgv_select()</> functions required package and variable must
        exists. Otherwise the error will be raised. It is necessary to set
        variable with <function>pgv_insert()</> function to use these functions.
      </para>

      <para>
        <function>pgv_update()</>, <function>pgv_delete()</> and
        <function>pgv_select()</> functions check the variable type. If the
        variable type does not record type the error will be raised.
      </para>

      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Function
              </entry>
              <entry>
                Returns
              </entry>
              <entry>
                Description
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pgv_insert(package text, name text, r record)</literal>
              </entry>
              <entry>
                <literal>void</literal>
              </entry>
              <entry>
                Inserts a record to the variable collection. If package and
                variable do not exists they will be created. The first column
                of <literal>r</> will be a primary key. If exists a record with the same
                primary key the error will be raised. If this variable
                collection has other structure the error will be raised.
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_update(package text, name text, r record)</literal>
              </entry>
              <entry>
                <literal>boolean</literal>
              </entry>
              <entry>
                Updates a record with the corresponding primary key (the first
                column of <literal>r</> is a primary key). Returns
                <literal>true</> if a record was found. If this variable
                collection has other structure the error will be raised.
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_delete(package text, name text, value anynonarray)</literal>
              </entry>
              <entry>
                <literal>boolean</literal>
              </entry>
              <entry>
                Deletes a record with the corresponding primary key (the first
                column of <literal>r</> is a primary key). Returns
                <literal>true</> if a record was found.
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_select(package text, name text)</literal>
              </entry>
              <entry>
                <literal>set of record</literal>
              </entry>
              <entry>
                Returns the variable collection records.
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_select(package text, name text, value anynonarray)</literal>
              </entry>
              <entry>
                <literal>record</literal>
              </entry>
              <entry>
                Returns the record with the corresponding primary key (the first
                column of <literal>r</> is a primary key).
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_select(package text, name text, value anyarray)</literal>
              </entry>
              <entry>
                <literal>set of record</literal>
              </entry>
              <entry>
                Returns the variable collection records with the corresponding
                primary keys (the first column of <literal>r</> is a primary
                key).
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect3>
    <sect3 id="pg-variables-miscellaneous-functions">
      <title>Miscellaneous functions</title>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                Function
              </entry>
              <entry>
                Returns
              </entry>
              <entry>
                Description
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>pgv_exists(package text, name text)</literal>
              </entry>
              <entry>
                <literal>bool</literal>
              </entry>
              <entry>
                Returns <literal>true</> if package and variable exists.
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_remove(package text, name text)</literal>
              </entry>
              <entry>
                <literal>void</literal>
              </entry>
              <entry>
                Removes the variable with the corresponding name. Required
                package and variable must exists, otherwise the error will be
                raised.
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_remove(package text)</literal>
              </entry>
              <entry>
                <literal>void</literal>
              </entry>
              <entry>
                Removes the package and all package variables with the
                corresponding name. Required package must exists, otherwise the
                error will be raised.
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_free()</literal>
              </entry>
              <entry>
                <literal>void</literal>
              </entry>
              <entry>
                Removes all packages and variables.
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_list()</literal>
              </entry>
              <entry>
                <literal>table(package text, name text)</literal>
              </entry>
              <entry>
                Returns set of records of assigned packages and variables.
              </entry>
            </row>
            <row>
              <entry>
                <literal>pgv_stats()</literal>
              </entry>
              <entry>
                <literal>table(package text, used_memory bigint)</literal>
              </entry>
              <entry>
                Returns list of assigned packages and used memory in bytes.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        Note that <literal>pgv_stats()</literal> works only with the
        PostgreSQL 9.6 and newer.
      </para>
    </sect3>
  </sect2>
  <sect2 id="pg-variables-examples">
    <title>Examples</title>
    <para>
      It is easy to use functions to work with scalar variables:
    </para>
<programlisting>
SELECT pgv_set_int('vars', 'int1', 101);
SELECT pgv_set_int('vars', 'int2', 102);

SELECT pgv_get_int('vars', 'int1');
 pgv_get_int 
-------------
         101
(1 row)

SELECT pgv_get_int('vars', 'int2');
 pgv_get_int 
-------------
         102
(1 row)
</programlisting>
    <para>
      Let's assume we have a <varname>tab</varname> table:
    </para>
<programlisting>
CREATE TABLE tab (id int, t varchar);
INSERT INTO tab VALUES (0, 'str00'), (1, 'str11');
</programlisting>
    <para>
      Then you can use functions to work with record variables:
    </para>
<programlisting>
SELECT pgv_insert('vars', 'r1', tab) FROM tab;

SELECT pgv_select('vars', 'r1');
 pgv_select
------------
 (1,str11)
 (0,str00)
(2 rows)

SELECT pgv_select('vars', 'r1', 1);
 pgv_select
------------
 (1,str11)
(1 row)

SELECT pgv_select('vars', 'r1', 0);
 pgv_select
------------
 (0,str00)
(1 row)

SELECT pgv_select('vars', 'r1', ARRAY[1, 0]);
 pgv_select
------------
 (1,str11)
 (0,str00)
(2 rows)

SELECT pgv_delete('vars', 'r1', 1);

SELECT pgv_select('vars', 'r1');
 pgv_select
------------
 (0,str00)
(1 row)
</programlisting>
    <para>
      You can list packages and variables:
    </para>
<programlisting>
SELECT * FROM pgv_list() order by package, name;
 package | name 
---------+------
 vars    | int1
 vars    | int2
 vars    | r1
(3 rows)
</programlisting>
    <para>
      And get used memory in bytes:
    </para>
<programlisting>
SELECT * FROM pgv_stats() order by package;
 package | used_memory
---------+-------------
 vars    |       16736
(1 row)
</programlisting>
    <para>
      You can delete variables or whole packages:
    </para>
<programlisting>
SELECT pgv_remove('vars', 'int1');
SELECT pgv_remove('vars');
</programlisting>
    <para>
      You can delete all packages and variables:
    </para>
<programlisting>
SELECT pgv_free();
</programlisting>
  </sect2>
</sect1>

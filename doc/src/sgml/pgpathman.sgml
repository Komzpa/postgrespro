<sect1 id="pg-pathman">
  <title>pg_pathman</title>
  <para>
    The <literal>pg_pathman</literal> module provides optimized
    partitioning mechanism and functions to manage partitions.
  </para>
  <sect2 id="pg-pathman-concepts">
    <title>pg_pathman Concepts</title>
    <para>
      Partitioning refers to splitting one large table into smaller
      pieces. Each row in such table assigns to a single partition based
      on partitioning key. <productname>PostgreSQL</productname>
      supports partitioning via table inheritance. Each partition must
      be created as child table with CHECK CONSTRAINT. For example:
    </para>
    <programlisting>
CREATE TABLE test (id SERIAL PRIMARY KEY, title TEXT);
CREATE TABLE test_1 (CHECK ( id &gt;= 100 AND id &lt; 200 )) INHERITS (test);
CREATE TABLE test_2 (CHECK ( id &gt;= 200 AND id &lt; 300 )) INHERITS (test);
</programlisting>
    <para>
      Despite the flexibility this approach forces the planner to
      perform an exhaustive search and check constraints for each
      partition to determine which one should present in the plan. If
      the number of partitions is large the overhead may be significant.
    </para>
    <para>
      The <literal>pg_pathman</literal> module provides functions to
      manage partitions and partitioning mechanism optimized based on
      knowledge of the partitions structure. It stores partitioning
      configuration in the <literal>pathman_config</literal> table, each
      row of which contains single entry for partitioned table (relation
      name, partitioning key and type). During initialization the
      <literal>pg_pathman</literal> module caches information about
      child partitions in shared memory in form convenient to perform
      rapid search. When SELECT query executes
      <literal>pg_pathman</literal> analyzes conditions tree looking for
      conditions like:
    </para>
    <programlisting>
VARIABLE OP CONST
</programlisting>
    <para>
      where <literal>VARIABLE</literal> is partitioning key,
      <literal>OP</literal> is comparison operator (supported operators
      are =, &lt;, &lt;=, &gt;, &gt;=), <literal>CONST</literal> is
      scalar value. For example:
    </para>
    <programlisting>
WHERE id = 150
</programlisting>
    <para>
      Based on partitioning type and operator the
      <literal>pg_pathman</literal> searches corresponding partitions
      and builds the plan. Current version of
      <literal>pg_pathman</literal> supports two partitioning types:
    </para>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          RANGE - maps data to partitions based on ranges of
          partitioning key. Optimization is achieved by using binary
          search algorithm.
        </para>
      </listitem>
      <listitem>
        <para>
          HASH - maps rows to partitions based on hash function values
          (only INTEGER attributes at the moment);
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2 id="roadmap">
    <title>Roadmap</title>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Execute time sections selections (useful for nested loops and
          prepared statements);
        </para>
      </listitem>
      <listitem>
        <para>
          Optimization of ordering output from patitioned tables (useful
          for merge join and order by);
        </para>
      </listitem>
      <listitem>
        <para>
          Optimization of hash join when both tables are patitioned by
          join key;
        </para>
      </listitem>
      <listitem>
        <para>
          LIST-partitioning;
        </para>
      </listitem>
      <listitem>
        <para>
          HASH-partitioning by non-integer attributes.
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2 id="pg-pathman-installation">
    <title>Installation</title>
    <para>
      To install pg_pathman run in psql:
    </para>
    <programlisting>
CREATE EXTENSION pg_pathman;
</programlisting>
    <para>
      Then modify shared_preload_libraries parameter in postgres.conf as
      following:
    </para>
    <programlisting>
shared_preload_libraries = 'pg_pathman'
</programlisting>
    <para>
      It will require to restart the <productname>PostgreSQL</productname>
      instance.
    </para>
  </sect2>
  <sect2 id="pg-pathman-functions">
    <title>pg_pathman Functions</title>
    <sect3 id="partitions-creation">
      <title>Partitions Creation</title>
      <programlisting>
create_hash_partitions(
    relation TEXT,
    attribute TEXT,
    partitions_count INTEGER)
</programlisting>
      <para>
        Performs HASH partitioning for <literal>relation</literal> by
        integer key <literal>attribute</literal>. Creates
        <literal>partitions_count</literal> partitions and trigger on
        INSERT. All the data will be automatically copied from the
        parent to partitions.
      </para>
      <programlisting>
create_range_partitions(
    relation TEXT,
    attribute TEXT,
    start_value ANYELEMENT,
    interval ANYELEMENT,
    premake INTEGER DEFAULT NULL)

create_range_partitions(
    relation TEXT,
    attribute TEXT,
    start_value ANYELEMENT,
    interval INTERVAL,
    premake INTEGER DEFAULT NULL)
</programlisting>
      <para>
        Performs RANGE partitioning for <literal>relation</literal> by
        partitioning key <literal>attribute</literal>.
        <literal>start_value</literal> argument specifies initial value,
        <literal>interval</literal> sets the range of values in a single
        partition, <literal>premake</literal> is the number of premade
        partitions (if not set then pathman tries to determine it based
        on attribute values). All the data will be automatically copied
        from the parent to partitions.
      </para>
      <programlisting>
create_partitions_from_range(
    relation TEXT,
    attribute TEXT,
    start_value ANYELEMENT,
    end_value ANYELEMENT,
    interval ANYELEMENT)

create_partitions_from_range(
    relation TEXT,
    attribute TEXT,
    start_value ANYELEMENT,
    end_value ANYELEMENT,
    interval INTERVAL)
</programlisting>
      <para>
        Performs RANGE-partitioning from specified range for
        <literal>relation</literal> by partitioning key
        <literal>attribute</literal>. Data will be copied to partitions
        as well.
      </para>
    </sect3>
    <sect3 id="pg-pathman-triggers">
      <title>Triggers</title>
      <programlisting>
create_hash_update_trigger(parent TEXT)
</programlisting>
      <para>
        Creates the trigger on UPDATE for HASH partitions. The UPDATE
        trigger isn't created by default because of overhead. It is
        useful in cases when key attribute could be changed.
      </para>
      <programlisting>
create_range_update_trigger(parent TEXT)
</programlisting>
      <para>
        Same as above for RANGE partitioned table.
      </para>
    </sect3>
    <sect3 id="partitions-management">
      <title>Partitions management</title>
      <programlisting>
split_range_partition(partition TEXT, value ANYELEMENT)
</programlisting>
      <para>
        Splits RANGE <literal>partition</literal> in two by
        <literal>value</literal>.
      </para>
      <programlisting>
merge_range_partitions(partition1 TEXT, partition2 TEXT)
</programlisting>
      <para>
        Merge two adjacent RANGE partitions. Data from
        <literal>partition2</literal> is copied to
        <literal>partition1</literal>. Then the
        <literal>partition2</literal> is removed.
      </para>
      <programlisting>
append_range_partition(p_relation TEXT)
</programlisting>
      <para>
        Appends new RANGE partition and returns
      </para>
      <programlisting>
prepend_range_partition(p_relation TEXT)
</programlisting>
      <para>
        Prepends new RANGE partition.
      </para>
      <programlisting>
add_range_partition(
    relation TEXT,
    start_value ANYELEMENT,
    end_value ANYELEMENT)
</programlisting>
      <para>
        Creates new RANGE partition for <literal>relation</literal> with
        specified values range.
      </para>
      <programlisting>
drop_range_partition(partition TEXT)
</programlisting>
      <para>
        Drops RANGE partition and all its data.
      </para>
      <programlisting>
attach_range_partition(
    relation TEXT,
    partition TEXT,
    start_value ANYELEMENT,
    end_value ANYELEMENT)
</programlisting>
      <para>
        Attaches partition to existing RANGE partitioned relation. The
        table being attached must have exact same structure as the
        parent one.
      </para>
      <programlisting>
detach_range_partition(partition TEXT)
</programlisting>
      <para>
        Detaches partition from existing RANGE partitioned relation.
      </para>
      <programlisting>
disable_partitioning(relation TEXT)
</programlisting>
      <para>
        Disables <literal>pg_pathman</literal> partitioning mechanism
        for the specified parent table and removes an insert trigger.
        Partitions itself remain unchanged.
      </para>
    </sect3>
  </sect2>
  <sect2 id="examples">
    <title>Examples</title>
    <sect3 id="hash">
      <title>HASH</title>
      <para>
        Consider an example of HASH partitioning. First create a table
        with some integer column:
      </para>
      <programlisting>
CREATE TABLE items (
    id       SERIAL PRIMARY KEY,
    name     TEXT,
    code     BIGINT);

INSERT INTO items (id, name, code)
SELECT g, md5(g::text), random() * 100000
FROM generate_series(1, 100000) as g;
</programlisting>
      <para>
        If partitions are supposed to have indexes, then they should be
        created for parent table before partitioning. In this case
        pg_pathman will automaticaly create indexes for partitions. Then
        run create_hash_partitions() function with appropriate
        arguments:
      </para>
      <programlisting>
SELECT create_hash_partitions('items', 'id', 100);
</programlisting>
      <para>
        This will create new partitions and move the data from parent to
        partitions. Here is an example of the query with filtering by
        partitioning key and its plan:
      </para>
      <programlisting>
SELECT * FROM items WHERE id = 1234;
  id  |               name               | code 
------+----------------------------------+------
 1234 | 81dc9bdb52d04dc20036dbd8313ed055 | 1855
(1 row)

EXPLAIN SELECT * FROM items WHERE id = 1234;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Append  (cost=0.28..8.29 rows=0 width=0)
   -&gt;  Index Scan using items_34_pkey on items_34  (cost=0.28..8.29 rows=0 width=0)
         Index Cond: (id = 1234)
</programlisting>
      <para>
        Note that pg_pathman exludes parent table from the query plan.
        To access parent table use ONLY modifier:
      </para>
      <programlisting>
EXPLAIN SELECT * FROM ONLY items;
                      QUERY PLAN                      
------------------------------------------------------
 Seq Scan on items  (cost=0.00..0.00 rows=1 width=45)
</programlisting>
    </sect3>
    <sect3 id="range">
      <title>RANGE</title>
      <para>
        Consider an example of RANGE partitioning. Let's create a table
        to store log data:
      </para>
      <programlisting>
CREATE TABLE journal (
    id      SERIAL,
    dt      TIMESTAMP NOT NULL,
    level   INTEGER,
    msg     TEXT
);
CREATE INDEX ON journal(dt);

INSERT INTO journal (dt, level, msg)
SELECT g, random()*6, md5(g::text)
FROM generate_series('2015-01-01'::date, '2015-12-31'::date, '1 minute') as g;
</programlisting>
      <para>
        Run create_range_partitions() function to create partitions so
        that each partition would contain data for one day:
      </para>
      <programlisting>
SELECT create_range_partitions('journal', 'dt', '2015-01-01'::date, '1 day'::interval);
</programlisting>
      <para>
        It will create 365 partitions and move the data from parent to
        partitions.
      </para>
      <para>
        New partitions are appended automaticaly by insert trigger. But
        it can be done manually with the following functions:
      </para>
      <programlisting>
SELECT add_range_partition('journal', '2016-01-01'::date, '2016-01-07'::date);
SELECT append_range_partition('journal');
</programlisting>
      <para>
        The first one creates partition with specified range. The second
        one creates partition with default interval and appends it to
        the partition list. It is also possible to attach an existing
        table as partition. For example we may want to attach an archive
        table (or even foreign table from another server) for outdated
        data:
      </para>
      <programlisting>
CREATE FOREIGN TABLE journal_archive (
    id      INTEGER NOT NULL,
    dt      TIMESTAMP NOT NULL,
    level   INTEGER,
    msg     TEXT
) SERVER archive_server;

SELECT attach_range_partition('journal', 'journal_archive', '2014-01-01'::date, '2015-01-01'::date);
</programlisting>
      <blockquote>
        <para>
          Important: the structure of the table being attched must
          exactly match the parent.
        </para>
      </blockquote>
      <para>
        To merge to adjacent partitions use function:
      </para>
      <programlisting>
SELECT merge_range_partitions('journal_archive', 'journal_1');
</programlisting>
      <para>
        To split partition by value use function:
      </para>
      <programlisting>
SELECT split_range_partition('journal_366', '2016-01-03'::date);
</programlisting>
      <para>
        To detach partition use:
      </para>
      <programlisting>
SELECT detach_range_partition('journal_archive');
</programlisting>
      <para>
        Here is an example of the query with filtering by partitioning
        key and its plan:
      </para>
      <programlisting>
SELECT * FROM journal WHERE dt &gt;= '2015-06-01' AND dt &lt; '2015-06-03';
   id   |         dt          | level |               msg
--------+---------------------+-------+----------------------------------
 217441 | 2015-06-01 00:00:00 |     2 | 15053892d993ce19f580a128f87e3dbf
 217442 | 2015-06-01 00:01:00 |     1 | 3a7c46f18a952d62ce5418ac2056010c
 217443 | 2015-06-01 00:02:00 |     0 | 92c8de8f82faf0b139a3d99f2792311d
 ...
(2880 rows)

EXPLAIN SELECT * FROM journal WHERE dt &gt;= '2015-06-01' AND dt &lt; '2015-06-03';
                            QUERY PLAN
------------------------------------------------------------------
 Append  (cost=0.00..58.80 rows=0 width=0)
   -&gt;  Seq Scan on journal_152  (cost=0.00..29.40 rows=0 width=0)
   -&gt;  Seq Scan on journal_153  (cost=0.00..29.40 rows=0 width=0)
(3 rows)
</programlisting>
    </sect3>
    <sect3 id="disable-pg-pathman">
      <title>Disable pg_pathman</title>
      <para>
        To disable pg_pathman for some previously partitioned table use
        disable_partitioning() function:
      </para>
      <programlisting>
SELECT disable_partitioning('range_rel');
</programlisting>
      <para>
        All sections and data will stay available and will be handled by
        standard PostgreSQL partitioning mechanism.
      </para>
    </sect3>
  </sect2>
</sect1>

CREATE COMPRESSION METHOD jsonb2 FOR json HANDLER no_such_handler;
ERROR:  function no_such_handler(internal) does not exist
CREATE COMPRESSION METHOD jsonb FOR json HANDLER jsonb_handler;
ERROR:  compression method "jsonb" already exists
CREATE COMPRESSION METHOD jsonb2 FOR json HANDLER jsonb_handler;
CREATE TABLE jstest(
	js text COMPRESSED jsonb
);
ERROR:  compression method "jsonb" is not applicable to type "text"
CREATE TABLE jstest(
	js text COMPRESSED jsonb2
);
ERROR:  compression method "jsonb2" is not applicable to type "text"
CREATE TABLE jstest(
	js1 json,
	js2 json COMPRESSED jsonb2,
	js3 json COMPRESSED jsonbc,
	js4 json COMPRESSED jsonbc,
	js5 jsonb
);
INSERT INTO jstest
SELECT js, js, js, js, js
FROM (VALUES
	('{"key1": "val1", "key2": ["val2", 3, 4, 5]}'::json),
	('["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]'),
	('"val"'),
	('12345'),
	(('[' || repeat('"test", ', 10000) || '"test"]')::json)
) AS jsvals(js);
SELECT
	substring(js1::text for 100),
	substring(js2::text for 100),
	substring(js3::text for 100),
	substring(js4::text for 100),
	substring(js5::text for 100)
FROM jstest;
                                              substring                                               |                                              substring                                               |                                              substring                                               |                                              substring                                               |                                              substring                                               

 {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}
 ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]
 "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"
 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345
 ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te
(5 rows)

-- check page items size
CREATE EXTENSION pageinspect;
SELECT
	lp, lp_off, lp_flags, lp_len,
	CASE lp WHEN 5 THEN NULL ELSE t_data END
FROM
	heap_page_items(get_raw_page('jstest', 0));
 lp | lp_off | lp_flags | lp_len |                                                                                                                                                                                                                                                                        t_data                                                                                                                                                                                                                                                                        

  1 |   7912 |        1 |    274 | \x597b226b657931223a202276616c31222c20226b657932223a205b2276616c32222c20332c20342c20355d7da302000020040000800400000004000000300000506b6579316b65793276616c31040000400400008008000010080000100800001076616c322000000000800300200000000080040020000000008005002d110121016776616c3112210b0b0b76616c3206080a2d110121016776616c3112210b0b0b76616c3206080aa302000020040000800400000004000000300000506b6579316b65793276616c31040000400400008008000010080000100800001076616c32200000000080030020000000008004002000000000800500
  2 |   7616 |        1 |    289 | \x5f5b2276616c31222c20322c207b226b31223a20227631222c20226b32223a20327d2c2022222c20352c202236225dad0600004004000080080000102400005000000000080000100100000076616c312000000000800200020000200200008002000000020000000a0000106b316b327631000020000000008002002000000000800500362f1a210b47010b0976616c3104110311010b7631040a362f1a210b47010b0976616c3104110311010b7631040a36ad0600004004000080080000102400005000000000080000100100000076616c312000000000800200020000200200008002000000020000000a0000106b316b32763100002000000000800200200000000080050036
  3 |   7544 |        1 |     66 | \x0d2276616c2219010000500300008076616c0d041976616c0d041976616c19010000500300008076616c
  4 |   7464 |        1 |     80 | \x0d313233343527010000500a000090280000000180010029090d041bf2c0010d041bf2c00127010000500a00009028000000018001002909
  5 |   6424 |        1 |   1033 | 
(5 rows)

SELECT
	lp,
	length(unnest(t_attrs)),
	CASE lp WHEN 5 THEN NULL ELSE unnest(t_attrs) END
FROM
	heap_page_item_attrs(
		get_raw_page('jstest', 0),
		'jstest'::regclass,
		false
	);
 lp | length |                                                                                     unnest                                                                                     
----+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  1 |     44 | \x597b226b657931223a202276616c31222c20226b657932223a205b2276616c32222c20332c20342c20355d7d
  1 |     81 | \xa302000020040000800400000004000000300000506b6579316b65793276616c31040000400400008008000010080000100800001076616c32200000000080030020000000008004002000000000800500
  1 |     22 | \x2d110121016776616c3112210b0b0b76616c3206080a
  1 |     22 | \x2d110121016776616c3112210b0b0b76616c3206080a
  1 |     81 | \xa302000020040000800400000004000000300000506b6579316b65793276616c31040000400400008008000010080000100800001076616c32200000000080030020000000008004002000000000800500
  2 |     47 | \x5f5b2276616c31222c20322c207b226b31223a20227631222c20226b32223a20327d2c2022222c20352c202236225d
  2 |     86 | \xad0600004004000080080000102400005000000000080000100100000076616c312000000000800200020000200200008002000000020000000a0000106b316b32763100002000000000800200200000000080050036
  2 |     23 | \x2f1a210b47010b0976616c3104110311010b7631040a36
  2 |     23 | \x2f1a210b47010b0976616c3104110311010b7631040a36
  2 |     86 | \xad0600004004000080080000102400005000000000080000100100000076616c312000000000800200020000200200008002000000020000000a0000106b316b32763100002000000000800200200000000080050036
  3 |      6 | \x0d2276616c22
  3 |     12 | \x19010000500300008076616c
  3 |      6 | \x0d041976616c
  3 |      6 | \x0d041976616c
  3 |     12 | \x19010000500300008076616c
  4 |      6 | \x0d3132333435
  4 |     19 | \x27010000500a00009028000000018001002909
  4 |      6 | \x0d041bf2c001
  4 |      6 | \x0d041bf2c001
  4 |     19 | \x27010000500a00009028000000018001002909
  5 |    937 | 
  5 |     18 | 
  5 |     18 | 
  5 |     18 | 
  5 |     18 | 
(25 rows)

DROP EXTENSION pageinspect;
-- copy json values with different compression
INSERT INTO jstest SELECT js1, js2, js3, js4, js5 FROM jstest LIMIT 5;
INSERT INTO jstest SELECT js2, js3, js4, js5, js1 FROM jstest LIMIT 5;
INSERT INTO jstest SELECT js3, js4, js5, js1, js2 FROM jstest LIMIT 5;
INSERT INTO jstest SELECT js4, js5, js1, js2, js3 FROM jstest LIMIT 5;
INSERT INTO jstest SELECT js5, js1, js2, js3, js4 FROM jstest LIMIT 5;
SELECT
	substring(js1::text for 100),
	substring(js2::text for 100),
	substring(js3::text for 100),
	substring(js4::text for 100),
	substring(js5::text for 100)
FROM jstest;
                                              substring                                               |                                              substring                                               |                                              substring                                               |                                              substring                                               |                                              substring                                               
------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------
 {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}
 ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]
 "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"
 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345
 ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te
 {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}
 ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]
 "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"
 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345
 ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te
 {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}
 ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]
 "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"
 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345
 ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te
 {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}
 ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]
 "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"
 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345
 ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te
 {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}
 ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]
 "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"
 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345
 ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te
 {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}                                                          | {"key1": "val1", "key2": ["val2", 3, 4, 5]}
 ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]                                                       | ["val1", 2, {"k1": "v1", "k2": 2}, "", 5, "6"]
 "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"                                                                                                | "val"
 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345                                                                                                | 12345
 ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te | ["test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "te
(30 rows)

CREATE FUNCTION jsonbc_dict_contents() RETURNS TABLE (dict name, id integer, name text)
LANGUAGE sql AS '
SELECT
	c.relname dict, d.id, d.name
FROM
	pg_jsonbc_dict d LEFT JOIN pg_class c ON d.dict = c.oid
ORDER BY 1, 2, 3';
CREATE FUNCTION jsonbc_dict_deps() RETURNS TABLE (relname name, attnum integer, cmname name)
LANGUAGE sql AS '
SELECT
	d.objid::regclass::name relname, d.objsubid attnum, c.cmname
FROM
	pg_depend d JOIN pg_compression c ON d.refobjid = c.oid
WHERE
	classid = ''pg_class''::regclass AND
	refclassid = ''pg_compression''::regclass
ORDER BY 1, 2';
SELECT * FROM jsonbc_dict_contents();
            dict            | id | name 
----------------------------+----+------
 jstest_js3_jsonbc_dict_seq |  1 | key1
 jstest_js3_jsonbc_dict_seq |  2 | key2
 jstest_js3_jsonbc_dict_seq |  3 | k1
 jstest_js3_jsonbc_dict_seq |  4 | k2
 jstest_js4_jsonbc_dict_seq |  1 | key1
 jstest_js4_jsonbc_dict_seq |  2 | key2
 jstest_js4_jsonbc_dict_seq |  3 | k1
 jstest_js4_jsonbc_dict_seq |  4 | k2
(8 rows)

-- alter column compression methods
SELECT relname, relkind FROM pg_class WHERE relname LIKE 'jstest%';
          relname           | relkind 
----------------------------+---------
 jstest                     | r
 jstest_js3_jsonbc_dict_seq | S
 jstest_js4_jsonbc_dict_seq | S
(3 rows)

ALTER TABLE jstest ALTER js1 SET COMPRESSED jsonbc;
SELECT relname, relkind FROM pg_class WHERE relname LIKE 'jstest%';
          relname           | relkind 
----------------------------+---------
 jstest                     | r
 jstest_js1_jsonbc_dict_seq | S
 jstest_js3_jsonbc_dict_seq | S
 jstest_js4_jsonbc_dict_seq | S
(4 rows)

SELECT * FROM jsonbc_dict_contents();
            dict            | id | name 
----------------------------+----+------
 jstest_js1_jsonbc_dict_seq |  1 | key1
 jstest_js1_jsonbc_dict_seq |  2 | key2
 jstest_js1_jsonbc_dict_seq |  3 | k1
 jstest_js1_jsonbc_dict_seq |  4 | k2
 jstest_js3_jsonbc_dict_seq |  1 | key1
 jstest_js3_jsonbc_dict_seq |  2 | key2
 jstest_js3_jsonbc_dict_seq |  3 | k1
 jstest_js3_jsonbc_dict_seq |  4 | k2
 jstest_js4_jsonbc_dict_seq |  1 | key1
 jstest_js4_jsonbc_dict_seq |  2 | key2
 jstest_js4_jsonbc_dict_seq |  3 | k1
 jstest_js4_jsonbc_dict_seq |  4 | k2
(12 rows)

SELECT * FROM jsonbc_dict_deps() WHERE relname = 'jstest';
 relname | attnum |   cmname   
---------+--------+------------
 jstest  |      1 | jsonbc
 jstest  |      2 | jsonb2
 jstest  |      3 | jsonbc
 jstest  |      4 | jsonbc
 jstest  |      5 | jsonb_null
(5 rows)

ALTER TABLE jstest ALTER js2 SET NOT COMPRESSED;
SELECT relname, relkind FROM pg_class WHERE relname LIKE 'jstest%';
          relname           | relkind 
----------------------------+---------
 jstest                     | r
 jstest_js1_jsonbc_dict_seq | S
 jstest_js3_jsonbc_dict_seq | S
 jstest_js4_jsonbc_dict_seq | S
(4 rows)

SELECT * FROM jsonbc_dict_contents();
            dict            | id | name 
----------------------------+----+------
 jstest_js1_jsonbc_dict_seq |  1 | key1
 jstest_js1_jsonbc_dict_seq |  2 | key2
 jstest_js1_jsonbc_dict_seq |  3 | k1
 jstest_js1_jsonbc_dict_seq |  4 | k2
 jstest_js3_jsonbc_dict_seq |  1 | key1
 jstest_js3_jsonbc_dict_seq |  2 | key2
 jstest_js3_jsonbc_dict_seq |  3 | k1
 jstest_js3_jsonbc_dict_seq |  4 | k2
 jstest_js4_jsonbc_dict_seq |  1 | key1
 jstest_js4_jsonbc_dict_seq |  2 | key2
 jstest_js4_jsonbc_dict_seq |  3 | k1
 jstest_js4_jsonbc_dict_seq |  4 | k2
(12 rows)

SELECT * FROM jsonbc_dict_deps() WHERE relname = 'jstest';
 relname | attnum |   cmname   
---------+--------+------------
 jstest  |      1 | jsonbc
 jstest  |      2 | json_null
 jstest  |      3 | jsonbc
 jstest  |      4 | jsonbc
 jstest  |      5 | jsonb_null
(5 rows)

ALTER TABLE jstest ALTER js3 SET NOT COMPRESSED;
SELECT relname, relkind FROM pg_class WHERE relname LIKE 'jstest%';
          relname           | relkind 
----------------------------+---------
 jstest                     | r
 jstest_js1_jsonbc_dict_seq | S
 jstest_js4_jsonbc_dict_seq | S
(3 rows)

SELECT * FROM jsonbc_dict_contents();
            dict            | id | name 
----------------------------+----+------
 jstest_js1_jsonbc_dict_seq |  1 | key1
 jstest_js1_jsonbc_dict_seq |  2 | key2
 jstest_js1_jsonbc_dict_seq |  3 | k1
 jstest_js1_jsonbc_dict_seq |  4 | k2
 jstest_js4_jsonbc_dict_seq |  1 | key1
 jstest_js4_jsonbc_dict_seq |  2 | key2
 jstest_js4_jsonbc_dict_seq |  3 | k1
 jstest_js4_jsonbc_dict_seq |  4 | k2
(8 rows)

SELECT * FROM jsonbc_dict_deps() WHERE relname = 'jstest';
 relname | attnum |   cmname   
---------+--------+------------
 jstest  |      1 | jsonbc
 jstest  |      2 | json_null
 jstest  |      3 | json_null
 jstest  |      4 | jsonbc
 jstest  |      5 | jsonb_null
(5 rows)

ALTER TABLE jstest ALTER js3 SET COMPRESSED jsonb2;
SELECT relname, relkind FROM pg_class WHERE relname LIKE 'jstest%';
          relname           | relkind 
----------------------------+---------
 jstest                     | r
 jstest_js1_jsonbc_dict_seq | S
 jstest_js4_jsonbc_dict_seq | S
(3 rows)

SELECT * FROM jsonbc_dict_contents();
            dict            | id | name 
----------------------------+----+------
 jstest_js1_jsonbc_dict_seq |  1 | key1
 jstest_js1_jsonbc_dict_seq |  2 | key2
 jstest_js1_jsonbc_dict_seq |  3 | k1
 jstest_js1_jsonbc_dict_seq |  4 | k2
 jstest_js4_jsonbc_dict_seq |  1 | key1
 jstest_js4_jsonbc_dict_seq |  2 | key2
 jstest_js4_jsonbc_dict_seq |  3 | k1
 jstest_js4_jsonbc_dict_seq |  4 | k2
(8 rows)

SELECT * FROM jsonbc_dict_deps() WHERE relname = 'jstest';
 relname | attnum |   cmname   
---------+--------+------------
 jstest  |      1 | jsonbc
 jstest  |      2 | json_null
 jstest  |      3 | jsonb2
 jstest  |      4 | jsonbc
 jstest  |      5 | jsonb_null
(5 rows)

ALTER TABLE jstest ADD js6 json COMPRESSED jsonbc;
UPDATE jstest SET js6 = js1;
SELECT relname, relkind FROM pg_class WHERE relname LIKE 'jstest%';
          relname           | relkind 
----------------------------+---------
 jstest                     | r
 jstest_js1_jsonbc_dict_seq | S
 jstest_js4_jsonbc_dict_seq | S
 jstest_js6_jsonbc_dict_seq | S
(4 rows)

SELECT * FROM jsonbc_dict_contents();
            dict            | id | name 
----------------------------+----+------
 jstest_js1_jsonbc_dict_seq |  1 | key1
 jstest_js1_jsonbc_dict_seq |  2 | key2
 jstest_js1_jsonbc_dict_seq |  3 | k1
 jstest_js1_jsonbc_dict_seq |  4 | k2
 jstest_js4_jsonbc_dict_seq |  1 | key1
 jstest_js4_jsonbc_dict_seq |  2 | key2
 jstest_js4_jsonbc_dict_seq |  3 | k1
 jstest_js4_jsonbc_dict_seq |  4 | k2
 jstest_js6_jsonbc_dict_seq |  1 | key1
 jstest_js6_jsonbc_dict_seq |  2 | key2
 jstest_js6_jsonbc_dict_seq |  3 | k1
 jstest_js6_jsonbc_dict_seq |  4 | k2
(12 rows)

SELECT * FROM jsonbc_dict_deps() WHERE relname = 'jstest';
 relname | attnum |   cmname   
---------+--------+------------
 jstest  |      1 | jsonbc
 jstest  |      2 | json_null
 jstest  |      3 | jsonb2
 jstest  |      4 | jsonbc
 jstest  |      5 | jsonb_null
 jstest  |      6 | jsonbc
(6 rows)

-- try to use existing jsonbc dictionary
DO
$$
DECLARE
	dict_id oid;
BEGIN
	SELECT substring(attcmoptions[1] from 9)
	INTO STRICT dict_id
	FROM pg_attribute
	WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'jstest')
	AND attname = 'js6';

	EXECUTE 'ALTER TABLE jstest ADD js7 json COMPRESSED jsonbc WITH (dict_id ''' || dict_id || ''')';
END
$$;
SELECT relname, relkind FROM pg_class WHERE relname LIKE 'jstest%';
          relname           | relkind 
----------------------------+---------
 jstest                     | r
 jstest_js1_jsonbc_dict_seq | S
 jstest_js4_jsonbc_dict_seq | S
 jstest_js6_jsonbc_dict_seq | S
(4 rows)

SELECT * FROM jsonbc_dict_contents();
            dict            | id | name 
----------------------------+----+------
 jstest_js1_jsonbc_dict_seq |  1 | key1
 jstest_js1_jsonbc_dict_seq |  2 | key2
 jstest_js1_jsonbc_dict_seq |  3 | k1
 jstest_js1_jsonbc_dict_seq |  4 | k2
 jstest_js4_jsonbc_dict_seq |  1 | key1
 jstest_js4_jsonbc_dict_seq |  2 | key2
 jstest_js4_jsonbc_dict_seq |  3 | k1
 jstest_js4_jsonbc_dict_seq |  4 | k2
 jstest_js6_jsonbc_dict_seq |  1 | key1
 jstest_js6_jsonbc_dict_seq |  2 | key2
 jstest_js6_jsonbc_dict_seq |  3 | k1
 jstest_js6_jsonbc_dict_seq |  4 | k2
(12 rows)

SELECT * FROM jsonbc_dict_deps() WHERE relname = 'jstest';
 relname | attnum |   cmname   
---------+--------+------------
 jstest  |      1 | jsonbc
 jstest  |      2 | json_null
 jstest  |      3 | jsonb2
 jstest  |      4 | jsonbc
 jstest  |      5 | jsonb_null
 jstest  |      6 | jsonbc
 jstest  |      7 | jsonbc
(7 rows)

ALTER TABLE jstest DROP js6;
SELECT relname, relkind FROM pg_class WHERE relname LIKE 'jstest%';
          relname           | relkind 
----------------------------+---------
 jstest                     | r
 jstest_js1_jsonbc_dict_seq | S
 jstest_js4_jsonbc_dict_seq | S
 jstest_js6_jsonbc_dict_seq | S
(4 rows)

SELECT * FROM jsonbc_dict_contents();
            dict            | id | name 
----------------------------+----+------
 jstest_js1_jsonbc_dict_seq |  1 | key1
 jstest_js1_jsonbc_dict_seq |  2 | key2
 jstest_js1_jsonbc_dict_seq |  3 | k1
 jstest_js1_jsonbc_dict_seq |  4 | k2
 jstest_js4_jsonbc_dict_seq |  1 | key1
 jstest_js4_jsonbc_dict_seq |  2 | key2
 jstest_js4_jsonbc_dict_seq |  3 | k1
 jstest_js4_jsonbc_dict_seq |  4 | k2
 jstest_js6_jsonbc_dict_seq |  1 | key1
 jstest_js6_jsonbc_dict_seq |  2 | key2
 jstest_js6_jsonbc_dict_seq |  3 | k1
 jstest_js6_jsonbc_dict_seq |  4 | k2
(12 rows)

SELECT * FROM jsonbc_dict_deps() WHERE relname = 'jstest';
 relname | attnum |   cmname   
---------+--------+------------
 jstest  |      1 | jsonbc
 jstest  |      2 | json_null
 jstest  |      3 | jsonb2
 jstest  |      4 | jsonbc
 jstest  |      5 | jsonb_null
 jstest  |      7 | jsonbc
(6 rows)

ALTER TABLE jstest ALTER js6 SET NOT COMPRESSED;
ERROR:  column "js6" of relation "jstest" does not exist
ALTER TABLE jstest DROP js6;
ERROR:  column "js6" of relation "jstest" does not exist
SELECT relname, relkind FROM pg_class WHERE relname LIKE 'jstest%';
          relname           | relkind 
----------------------------+---------
 jstest                     | r
 jstest_js1_jsonbc_dict_seq | S
 jstest_js4_jsonbc_dict_seq | S
 jstest_js6_jsonbc_dict_seq | S
(4 rows)

SELECT * FROM jsonbc_dict_contents();
            dict            | id | name 
----------------------------+----+------
 jstest_js1_jsonbc_dict_seq |  1 | key1
 jstest_js1_jsonbc_dict_seq |  2 | key2
 jstest_js1_jsonbc_dict_seq |  3 | k1
 jstest_js1_jsonbc_dict_seq |  4 | k2
 jstest_js4_jsonbc_dict_seq |  1 | key1
 jstest_js4_jsonbc_dict_seq |  2 | key2
 jstest_js4_jsonbc_dict_seq |  3 | k1
 jstest_js4_jsonbc_dict_seq |  4 | k2
 jstest_js6_jsonbc_dict_seq |  1 | key1
 jstest_js6_jsonbc_dict_seq |  2 | key2
 jstest_js6_jsonbc_dict_seq |  3 | k1
 jstest_js6_jsonbc_dict_seq |  4 | k2
(12 rows)

SELECT * FROM jsonbc_dict_deps() WHERE relname = 'jstest';
 relname | attnum |   cmname   
---------+--------+------------
 jstest  |      1 | jsonbc
 jstest  |      2 | json_null
 jstest  |      3 | jsonb2
 jstest  |      4 | jsonbc
 jstest  |      5 | jsonb_null
 jstest  |      7 | jsonbc
(6 rows)

ALTER TABLE jstest ALTER js7 SET COMPRESSED jsonb2;
SELECT relname, relkind FROM pg_class WHERE relname LIKE 'jstest%';
          relname           | relkind 
----------------------------+---------
 jstest                     | r
 jstest_js1_jsonbc_dict_seq | S
 jstest_js4_jsonbc_dict_seq | S
(3 rows)

SELECT * FROM jsonbc_dict_contents();
            dict            | id | name 
----------------------------+----+------
 jstest_js1_jsonbc_dict_seq |  1 | key1
 jstest_js1_jsonbc_dict_seq |  2 | key2
 jstest_js1_jsonbc_dict_seq |  3 | k1
 jstest_js1_jsonbc_dict_seq |  4 | k2
 jstest_js4_jsonbc_dict_seq |  1 | key1
 jstest_js4_jsonbc_dict_seq |  2 | key2
 jstest_js4_jsonbc_dict_seq |  3 | k1
 jstest_js4_jsonbc_dict_seq |  4 | k2
(8 rows)

SELECT * FROM jsonbc_dict_deps() WHERE relname = 'jstest';
 relname | attnum |   cmname   
---------+--------+------------
 jstest  |      1 | jsonbc
 jstest  |      2 | json_null
 jstest  |      3 | jsonb2
 jstest  |      4 | jsonbc
 jstest  |      5 | jsonb_null
 jstest  |      7 | jsonb2
(6 rows)

-- Try to drop compression method: fail because of dependent objects
DROP COMPRESSION METHOD jsonb2;
ERROR:  cannot drop compression method jsonb2 because other objects depend on it
DETAIL:  table jstest column js3 depends on compression method jsonb2
table jstest column js7 depends on compression method jsonb2
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
-- Drop compression method cascade
DROP COMPRESSION METHOD jsonb2 CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to table jstest column js3
drop cascades to table jstest column js7
SELECT * FROM jstest LIMIT 0;
 js1 | js2 | js4 | js5 
-----+-----+-----+-----
(0 rows)

DROP TABLE jstest;
SELECT relname, relkind FROM pg_class WHERE relname LIKE 'jstest%';
 relname | relkind 
---------+---------
(0 rows)

SELECT * FROM jsonbc_dict_contents();
 dict | id | name 
------+----+------
(0 rows)

SELECT * FROM jsonbc_dict_deps() WHERE relname = 'jstest';
 relname | attnum | cmname 
---------+--------+--------
(0 rows)

-- Test ALTER TYPE SET COMPRESSED
ALTER TYPE json SET COMPRESSED jsonb;
CREATE TABLE jstest (js json);
SELECT attcompression FROM pg_attribute WHERE attrelid = 'jstest'::regclass AND attnum = 1;
 attcompression 
----------------
           3368
(1 row)

INSERT INTO jstest VALUES ('[ 123,  "abc", { "k" : "v" }  ]');
SELECT * FROM jstest;
            js            
--------------------------
 [123, "abc", {"k": "v"}]
(1 row)

DROP TABLE jstest;
ALTER TYPE json SET NOT COMPRESSED;
CREATE TABLE jstest (js json);
SELECT attcompression FROM pg_attribute WHERE attrelid = 'jstest'::regclass AND attnum = 1;
 attcompression 
----------------
           3365
(1 row)

INSERT INTO jstest VALUES ('[ 123,  "abc", { "k" : "v" }  ]');
SELECT * FROM jstest;
               js                
---------------------------------
 [ 123,  "abc", { "k" : "v" }  ]
(1 row)

DROP TABLE jstest;
-- Test compressable type creation
CREATE TYPE json2;
CREATE TEMP TABLE json2_procs AS
SELECT * FROM pg_proc p WHERE proname IN ('json_in', 'json_out', 'json_null_cm_handler');
UPDATE json2_procs
SET proname = replace(proname, 'json_', 'json2_');
UPDATE json2_procs
SET prorettype = (SELECT oid FROM pg_type WHERE typname = 'json2')
WHERE proname = 'json2_in';
UPDATE json2_procs
SET proargtypes = (SELECT oid::text::oidvector FROM pg_type WHERE typname = 'json2')
WHERE proname = 'json2_out';
INSERT INTO pg_proc
SELECT * FROM json2_procs;
CREATE COMPRESSION METHOD json2_null FOR json2 HANDLER json2_null_cm_handler;
CREATE TYPE json2 (
	INPUT  = json2_in,
	OUTPUT = json2_out,
	NULLCM = json2_null
);
CREATE TEMP TABLE tjson2(js json2);
INSERT INTO tjson2 VALUES ('abc');
ERROR:  invalid input syntax for type json
LINE 1: INSERT INTO tjson2 VALUES ('abc');
                                   ^
DETAIL:  Token "abc" is invalid.
CONTEXT:  JSON data, line 1: abc
INSERT INTO tjson2 VALUES ('["abc", {"key": 123}, null]');
SELECT * FROM tjson2;
             js              
-----------------------------
 ["abc", {"key": 123}, null]
(1 row)

DROP FUNCTION json2_null_cm_handler(internal);
ERROR:  cannot drop function json2_null_cm_handler(internal) because other objects depend on it
DETAIL:  type json2 depends on compression method json2_null
table tjson2 column js depends on compression method json2_null
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP FUNCTION json2_in(cstring);
ERROR:  cannot drop function json2_in(cstring) because other objects depend on it
DETAIL:  type json2 depends on function json2_in(cstring)
table tjson2 column js depends on type json2
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP FUNCTION json2_out(json2);
ERROR:  cannot drop function json2_out(json2) because other objects depend on it
DETAIL:  type json2 depends on function json2_out(json2)
table tjson2 column js depends on type json2
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
DROP FUNCTION json2_out(json2) CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to type json2
drop cascades to table tjson2 column js
DROP FUNCTION json2_in(cstring);
DROP FUNCTION json2_null_cm_handler(internal);
DROP TABLE tjson2;
-- Test compression methods on domains
CREATE DOMAIN json_not_null AS json NOT NULL;
CREATE TEMP TABLE json_domain_test1(js json_not_null);
SELECT attcompression FROM pg_attribute WHERE attrelid = 'json_domain_test1'::regclass AND attnum = 1;
 attcompression 
----------------
           3365
(1 row)

DROP TABLE json_domain_test1;
CREATE TEMP TABLE json_domain_test2(js json_not_null compressed jsonb);
SELECT attcompression FROM pg_attribute WHERE attrelid = 'json_domain_test2'::regclass AND attnum = 1;
 attcompression 
----------------
           3368
(1 row)

DROP TABLE json_domain_test2;
